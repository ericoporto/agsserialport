// room script file

SP_Port* _port;

function room_RepExec()
{
  if(_port == null) return;

  int byte_count = _port.WaitingBytesRead;
  if(byte_count > 0)
  {
    String read = _port.Read(byte_count-1);
    if(read != null) Display(read); 
  }
}

function room_AfterFadeIn()
{
  if(_port.Open(eAGSP_Mode_Read) == eAGSP_OK)
  {
    if(_port.SetBaudrate(9600) != eAGSP_OK) Display("Error setting baudrate");
    if(_port.SetBits(8) != eAGSP_OK) Display("Error setting bits");
    if(_port.SetParity(eAGSP_Parity_None) != eAGSP_OK) Display("Error setting parity");
    if(_port.SetStopBits(1) != eAGSP_OK) Display("Error setting stop bits");
    if(_port.SetFlowControl(eAGSP_FlowControl_None) != eAGSP_OK) Display("Error setting flow control");
  }
  else 
  {
    _port = null;
  }
}

function room_Load()
{
  String portname;
  for(int i=0; i<AGSP.PortNamesCount; i++)
  {
    portname = AGSP.PortNames[i];
  }

  if(portname == null || portname.Length < 1)
  {
    return;
  }
    
  _port = SP_Port.Create(portname);
  
}

function hGlowingOrb_AnyClick()
{
  if(_port == null) return;
  
  Display(String.Format("Serial Port Name: %s\nDescription: %s\n", _port.Name, _port.Description));
}
